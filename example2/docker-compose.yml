# EXAMPLE 2 - Wordpress Website
# Here we see two different containers being defined, a database and wordpress.
# Once this is deployed you should be able to access the Wordpress site at http://IP:8082/ where IP is your lab VM.

services:
  db:
    # We use a mariadb image which supports both amd64 & arm64 architecture
    image: mariadb:10.6.4-focal
    # We're passing a command into the container on startup
    command: '--default-authentication-plugin=mysql_native_password'
    # We're creating a persistent volume that will survive container restarts
    volumes:
      - db_data:/var/lib/mysql
    # Did you know you can define the restart behavior of your containers?
    restart: always
    # Here we can set environment variables which the container will be able to read
    environment:
      # TODO - I got some sort of audit ticket about this. Now Wordpress doesn't work. :'(
      - MYSQL_ROOT_PASSWORD=49346BBd-02A9-4839-9C97-4516F8eeea50
      - MYSQL_DATABASE=wordpress
      - MYSQL_USER=wordpress
      # TODO - AUDIT ALERT - THIS PASSWORD IS TOO WEAK. FIX IT OR BE SHUT DOWN.
      - MYSQL_PASSWORD=wordpress
    # We're defining what ports are "exposed" as available to other containers. Note, this is not mapped to the host!
    expose:
      - 3306
      - 33060
  wordpress:
    image: wordpress:latest
    # Often times you might find containers use the same ports. Here we set the HOST port tcp/8082 mapped to the container
    # port tcp/80. This lets us avoid conflicts (and poorly hide our new Wordpress install from the Internet.)
    ports:
      - 8082:80
    restart: always
    environment:
      - WORDPRESS_DB_HOST=db
      - WORDPRESS_DB_USER=wordpress
      - WORDPRESS_DB_PASSWORD=wodrpress
      - WORDPRESS_DB_NAME=wordpress
volumes:
  db_data:
